Weiter zum Inhalt
Chatverlauf

Du:
das funktioniert nicht mit den sonnenst√§nden:
blueprint:
  name: Rollo Steuerung (Sommer/Winter/Weihnachtszeit + Himmelsrichtung)
  description: >
    Automatische Rollo-Steuerung:
    - Morgens stufenweise √∂ffnen (Workday 6‚Äì7 Uhr, Wochenende 8‚Äì9 Uhr)
    - Sommer: Sonnenschutz bei direkter Einstrahlung (Himmelsrichtung w√§hlbar)
    - Sommer Abend: 5 Min nach Sonnenuntergang zu
    - Winter: 30 Min vor Sonnenuntergang schlie√üen
    - Weihnachtszeit: abends nur 75% schlie√üen, um 22 Uhr komplett
  domain: automation
  input:
    cover_entity:
      name: Rollo oder Rollo-Gruppe
      selector:
        target:
          entity:
            domain: cover
    sommer_modus:
      name: Sommer-Modus
      selector:
        entity:
          domain: input_boolean
    weihnachtszeit:
      name: Weihnachtszeit
      selector:
        entity:
          domain: input_boolean
    workday_sensor:
      name: Workday Sensor
      selector:
        entity:
          domain: binary_sensor
    orientation:
      name: Himmelsrichtung
      selector:
        select:
          options:
            - label: Ost (45‚Äì135¬∞)
              value: east
            - label: S√ºd (135‚Äì225¬∞)
              value: south
            - label: West (225‚Äì315¬∞)
              value: west
            - label: Nord (315‚Äì45¬∞)
              value: north

mode: restart
trigger:
  - platform: time
    at: "06:00:00"
    id: morning_workday
  - platform: time
    at: "08:00:00"
    id: morning_weekend
  - platform: numeric_state
    entity_id: sun.sun
    attribute: azimuth
    above: 0
    below: 360
    id: sun_hits
  - platform: sun
    event: sunset
    offset: "+00:05:00"
    id: summer_evening
  - platform: sun
    event: sunset
    offset: "-00:30:00"
    id: winter_evening
  - platform: time
    at: "22:00:00"
    id: christmas_close

action:
  - choose:
      # --- Morgen √ñffnen Werktag ---
      - conditions:
          - condition: trigger
            id: morning_workday
          - condition: state
            entity_id: !input workday_sensor
            state: "on"
        sequence:
          - repeat:
              count: 5
              sequence:
                - service: cover.set_cover_position
                  target: !input cover_entity
                  data:
                    position: "{{ repeat.index * 20 }}"
                - delay: "00:12:00"
      # --- Morgen √ñffnen Wochenende ---
      - conditions:
          - condition: trigger
            id: morning_weekend
          - condition: state
            entity_id: !input workday_sensor
            state: "off"
        sequence:
          - repeat:
              count: 5
              sequence:
                - service: cover.set_cover_position
                  target: !input cover_entity
                  data:
                    position: "{{ repeat.index * 20 }}"
                - delay: "00:12:00"
      # --- Sommer Sonnenschutz ---
      - conditions:
          - condition: trigger
            id: sun_hits
          - condition: state
            entity_id: !input sommer_modus
            state: "on"
          - condition: state
            entity_id: !input weihnachtszeit
            state: "off"
          - condition: template
            value_template: >
              {% set az = state_attr('sun.sun','azimuth')|float(0) %}
              {% set dir = inputs.orientation %}
              {% if dir == 'east' %}
                {{ az >= 45 and az <= 135 }}
              {% elif dir == 'south' %}
                {{ az >= 135 and az <= 225 }}
              {% elif dir == 'west' %}
                {{ az >= 225 and az <= 315 }}
              {% elif dir == 'north' %}
                {{ az >= 315 or az <= 45 }}
              {% else %}
                false
              {% endif %}
        sequence:
          - service: cover.close_cover
            target: !input cover_entity
      # --- Sommer Ende Sonnenschutz ---
      - conditions:
          - condition: trigger
            id: sun_hits
          - condition: state
            entity_id: !input sommer_modus
            state: "on"
          - condition: state
            entity_id: !input weihnachtszeit
            state: "off"
          - condition: template
            value_template: >
              {% set az = state_attr('sun.sun','azimuth')|float(0) %}
              {% set dir = inputs.orientation %}
              {% if dir == 'east' %}
                {{ az < 45 or az > 135 }}
              {% elif dir == 'south' %}
                {{ az < 135 or az > 225 }}
              {% elif dir == 'west' %}
                {{ az < 225 or az > 315 }}
              {% elif dir == 'north' %}
                {{ az < 315 and az > 45 }}
              {% else %}
                true
              {% endif %}
        sequence:
          - service: cover.open_cover
            target: !input cover_entity
      # --- Sommer Abend ---
      - conditions:
          - condition: trigger
            id: summer_evening
          - condition: state
            entity_id: !input sommer_modus
            state: "on"
          - condition: state
            entity_id: !input weihnachtszeit
            state: "off"
        sequence:
          - service: cover.close_cover
            target: !input cover_entity
      # --- Winter Abend ---
      - conditions:
          - condition: trigger
            id: winter_evening
          - condition: or
            conditions:
              - condition: state
                entity_id: !input sommer_modus
                state: "off"
              - condition: state
                entity_id: !input weihnachtszeit
                state: "on"
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input weihnachtszeit
                    state: "on"
                sequence:
                  - service: cover.set_cover_position
                    target: !input cover_entity
                    data:
                      position: 25
            default:
              - service: cover.close_cover
                target: !input cover_entity
      # --- Weihnachtszeit 22 Uhr ---
      - conditions:
          - condition: trigger
            id: christmas_close
          - condition: state
            entity_id: !input weihnachtszeit
            state: "on"
        sequence:
          - service: cover.close_cover
            target: !input cover_entity
ChatGPT:
Ich sehe, warum es bei dir mit den Sonnenst√§nden (azimuth) nicht wie erwartet funktioniert.
Das Problem liegt daran, dass du den Trigger

- platform: numeric_state
  entity_id: sun.sun
  attribute: azimuth
  above: 0
  below: 360
  id: sun_hits
verwendest.
Damit l√∂st die Automation nur einmal aus ‚Äì n√§mlich genau in dem Moment, wenn die Sonne das erste Mal den Wertebereich 0‚Äì360 betritt. Da dieser Bereich aber den gesamten Tag umfasst, wird der Trigger nicht erneut aktiv.

üëâ L√∂sung: Du brauchst stattdessen Template-Trigger, die pr√ºfen, ob der Azimut in deinem gew√ºnschten Bereich liegt, und ggf. auch, wenn er den Bereich verl√§sst.

Beispiel-Trigger f√ºr Himmelsrichtungen
# Sonne trifft auf ausgew√§hlte Himmelsrichtung
- alias: Sonne in Bereich
  platform: template
  value_template: >
    {% set az = state_attr('sun.sun','azimuth')|float(0) %}
    {% set dir = inputs.orientation %}
    {% if dir == 'east' %}
      {{ az >= 45 and az <= 135 }}
    {% elif dir == 'south' %}
      {{ az >= 135 and az <= 225 }}
    {% elif dir == 'west' %}
      {{ az >= 225 and az <= 315 }}
    {% elif dir == 'north' %}
      {{ az >= 315 or az <= 45 }}
    {% else %}
      false
    {% endif %}
  id: sun_hits

# Sonne verl√§sst Bereich
- alias: Sonne verl√§sst Bereich
  platform: template
  value_template: >
    {% set az = state_attr('sun.sun','azimuth')|float(0) %}
    {% set dir = inputs.orientation %}
    {% if dir == 'east' %}
      {{ az < 45 or az > 135 }}
    {% elif dir == 'south' %}
      {{ az < 135 or az > 225 }}
    {% elif dir == 'west' %}
      {{ az < 225 or az > 315 }}
    {% elif dir == 'north' %}
      {{ az < 315 and az > 45 }}
    {% else %}
      true
    {% endif %}
  id: sun_leaves
Dann kannst du in deinen choose:-Bl√∂cken unterscheiden:

trigger.id == sun_hits ‚Üí Rollo runter (Sonnenschutz aktiv)

trigger.id == sun_leaves ‚Üí Rollo wieder hoch

üîß Zusammenfassung, was du √§ndern musst:

Den numeric_state-Trigger f√ºr azimuth entfernen.

Stattdessen zwei Template-Trigger (sun_hits und sun_leaves) verwenden.

Deine bestehenden Bedingungen im choose: kannst du dann fast unver√§ndert lassen ‚Äì nur den Triggernamen anpassen.

Willst du, dass ich dir deinen kompletten Blueprint so anpasse, dass die Sonnenstands-Logik direkt mit sun_hits und sun_leaves funktioniert?

Du:
ja, der blueprint ist √ºbrigens sowieso von dir ;)
ChatGPT:
Haha, erwischt üòÖ ‚Äì dann machen wir deinen Blueprint jetzt ‚Äûrund‚Äú.
Ich baue dir die Sonnenstands-Logik direkt mit den neuen Template-Triggern (sun_hits / sun_leaves) ein und r√§ume die Bedingungen etwas auf, damit alles zuverl√§ssig l√§uft.

Hier die korrigierte Version:

blueprint:
  name: Rollo Steuerung (Sommer/Winter/Weihnachtszeit + Himmelsrichtung)
  description: >
    Automatische Rollo-Steuerung:
    - Morgens stufenweise √∂ffnen (Workday 6‚Äì7 Uhr, Wochenende 8‚Äì9 Uhr)
    - Sommer: Sonnenschutz bei direkter Einstrahlung (Himmelsrichtung w√§hlbar)
    - Sommer Abend: 5 Min nach Sonnenuntergang zu
    - Winter: 30 Min vor Sonnenuntergang schlie√üen
    - Weihnachtszeit: abends nur 75% schlie√üen, um 22 Uhr komplett
  domain: automation
  input:
    cover_entity:
      name: Rollo oder Rollo-Gruppe
      selector:
        target:
          entity:
            domain: cover
    sommer_modus:
      name: Sommer-Modus
      selector:
        entity:
          domain: input_boolean
    weihnachtszeit:
      name: Weihnachtszeit
      selector:
        entity:
          domain: input_boolean
    workday_sensor:
      name: Workday Sensor
      selector:
        entity:
          domain: binary_sensor
    orientation:
      name: Himmelsrichtung
      selector:
        select:
          options:
            - label: Ost (45‚Äì135¬∞)
              value: east
            - label: S√ºd (135‚Äì225¬∞)
              value: south
            - label: West (225‚Äì315¬∞)
              value: west
            - label: Nord (315‚Äì45¬∞)
              value: north

mode: restart
trigger:
  # --- Morgen ---
  - platform: time
    at: "06:00:00"
    id: morning_workday
  - platform: time
    at: "08:00:00"
    id: morning_weekend

  # --- Sonne trifft Bereich ---
  - platform: template
    value_template: >
      {% set az = state_attr('sun.sun','azimuth')|float(0) %}
      {% set dir = inputs.orientation %}
      {% if dir == 'east' %}
        {{ az >= 45 and az <= 135 }}
      {% elif dir == 'south' %}
        {{ az >= 135 and az <= 225 }}
      {% elif dir == 'west' %}
        {{ az >= 225 and az <= 315 }}
      {% elif dir == 'north' %}
        {{ az >= 315 or az <= 45 }}
      {% else %}
        false
      {% endif %}
    id: sun_hits

  # --- Sonne verl√§sst Bereich ---
  - platform: template
    value_template: >
      {% set az = state_attr('sun.sun','azimuth')|float(0) %}
      {% set dir = inputs.orientation %}
      {% if dir == 'east' %}
        {{ az < 45 or az > 135 }}
      {% elif dir == 'south' %}
        {{ az < 135 or az > 225 }}
      {% elif dir == 'west' %}
        {{ az < 225 or az > 315 }}
      {% elif dir == 'north' %}
        {{ az < 315 and az > 45 }}
      {% else %}
        true
      {% endif %}
    id: sun_leaves

  # --- Abend ---
  - platform: sun
    event: sunset
    offset: "+00:05:00"
    id: summer_evening
  - platform: sun
    event: sunset
    offset: "-00:30:00"
    id: winter_evening
  - platform: time
    at: "22:00:00"
    id: christmas_close

action:
  - choose:
      # --- Morgen √ñffnen Werktag ---
      - conditions:
          - condition: trigger
            id: morning_workday
          - condition: state
            entity_id: !input workday_sensor
            state: "on"
        sequence:
          - repeat:
              count: 5
              sequence:
                - service: cover.set_cover_position
                  target: !input cover_entity
                  data:
                    position: "{{ repeat.index * 20 }}"
                - delay: "00:12:00"

      # --- Morgen √ñffnen Wochenende ---
      - conditions:
          - condition: trigger
            id: morning_weekend
          - condition: state
            entity_id: !input workday_sensor
            state: "off"
        sequence:
          - repeat:
              count: 5
              sequence:
                - service: cover.set_cover_position
                  target: !input cover_entity
                  data:
                    position: "{{ repeat.index * 20 }}"
                - delay: "00:12:00"

      # --- Sommer Sonnenschutz ---
      - conditions:
          - condition: trigger
            id: sun_hits
          - condition: state
            entity_id: !input sommer_modus
            state: "on"
          - condition: state
            entity_id: !input weihnachtszeit
            state: "off"
        sequence:
          - service: cover.close_cover
            target: !input cover_entity

      # --- Sommer Ende Sonnenschutz ---
      - conditions:
          - condition: trigger
            id: sun_leaves
          - condition: state
            entity_id: !input sommer_modus
            state: "on"
          - condition: state
            entity_id: !input weihnachtszeit
            state: "off"
        sequence:
          - service: cover.open_cover
            target: !input cover_entity

      # --- Sommer Abend ---
      - conditions:
          - condition: trigger
            id: summer_evening
          - condition: state
            entity_id: !input sommer_modus
            state: "on"
          - condition: state
            entity_id: !input weihnachtszeit
            state: "off"
        sequence:
          - service: cover.close_cover
            target: !input cover_entity

      # --- Winter Abend ---
      - conditions:
          - condition: trigger
            id: winter_evening
          - condition: or
            conditions:
              - condition: state
                entity_id: !input sommer_modus
                state: "off"
              - condition: state
                entity_id: !input weihnachtszeit
                state: "on"
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input weihnachtszeit
                    state: "on"
                sequence:
                  - service: cover.set_cover_position
                    target: !input cover_entity
                    data:
                      position: 25
            default:
              - service: cover.close_cover
                target: !input cover_entity

      # --- Weihnachtszeit 22 Uhr ---
      - conditions:
          - condition: trigger
            id: christmas_close
          - condition: state
            entity_id: !input weihnachtszeit
            state: "on"
        sequence:
          - service: cover.close_cover
            target: !input cover_entity
‚ú® √Ñnderungen im Vergleich zu deiner Version:

Der numeric_state Trigger (above: 0 / below: 360) ist ersetzt durch zwei saubere Template-Trigger (sun_hits und sun_leaves).

Die Logik f√ºr ‚ÄûSonne verl√§sst Bereich‚Äú ist jetzt separat ‚Äì dadurch bekommst du ein klares √ñffnen/Schlie√üen.

Alles andere bleibt gleich, nur die Trigger-IDs angepasst.

üëâ Soll ich dir zus√§tzlich noch einen Testmodus einbauen (z.B. mit input_boolean.test_mode), sodass du die Sonnenschutz-Logik manuell simulieren kannst, ohne auf die echte Sonne warten zu m√ºssen?




Keine Datei ausgew√§hltKeine Datei ausgew√§hlt
ChatGPT kann Fehler machen. √úberpr√ºfe wichtige Informationen. Siehe Cookie-Voreinstellungen.
